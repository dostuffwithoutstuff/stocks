{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","data","setData","localArr","getConfig","Promise","resolve","reject","fetch","then","response","json","console","log","catch","err","handleEtfsPerf","ticker","country","url","rp","html","doc","DOMParser","parseFromString","index","findIndex","item","id","elm","querySelectorAll","querySelector","textContent","splice","prevState","useEffect","configs","map","config","type","getAttribute","handleStocks","name","handleEtfs","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba13ae0a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport rp from \"request-promise\";\n\nimport \"./App.css\";\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  let localArr = [];\n\n  // read our data file in the public folder\n  const getConfig = new Promise((resolve, reject) => {\n    fetch('data.json').then(response => {\n      return response? response.json() : [];\n    }).then(data => {\n      // Work with JSON data here\n      console.log(data);\n    }).catch(err => {\n      // Do something for an error here\n      console.log(\"Error Reading data \" + err);\n    });\n\n  });\n\n  // handle canadian stocks\n  const handleStocks = (ticker, country = 'CAN') => {\n\n    let url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/Stocks/Overview/ca/';\n    if (country === 'US') {\n      url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/Stocks/Overview/us/';\n    }\n\n    rp(url + ticker)\n      .then(html => {\n        // Convert the HTML string into a document object\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(html, 'text/html');\n        var elm = {}\n\n        //common\n        elm['id'] = ticker;\n        elm['Ticker'] = doc.querySelector(\".issueExchange\").textContent + ':' + doc.querySelector(\".issueSymbol\").textContent;\n        elm['Name'] = doc.querySelector(\".issueName\").textContent;\n        elm['Price'] = doc.querySelector(\".primary-data-content li div span\").textContent;\n        elm['Change'] = doc.querySelector(\".changePercent\").textContent;\n        elm['52W Low'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('low');\n        elm['52W High'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('high');\n        elm['Volume'] = doc.querySelector('.volume-label ~ div').textContent;\n\n        //stocks\n        elm['Market Cap'] = doc.querySelectorAll('.fundamentalsTable tr')[0].querySelectorAll('div')[1].textContent;\n        elm['Dividend Yield'] = doc.querySelectorAll('.fundamentalsTable tr')[3].querySelectorAll('div')[1].textContent;\n        elm['Ex-Dividend Date'] = doc.querySelectorAll('.fundamentalsTable tr')[5].querySelectorAll('div')[1].textContent;\n\n        localArr = [...localArr, elm];\n        setData(localArr);\n      })\n      .catch(function (err) {\n        console.log(\"Stocks failed\");\n      });\n\n  }\n\n  const handleEtfs = (ticker, country = 'CAN') => {\n\n    let url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/Summary/ca/';\n    if (country === 'US') {\n      url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/Summary/us/';\n    }\n\n    rp(url + ticker)\n      .then(html => {\n        // Convert the HTML string into a document object\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(html, 'text/html');\n        var elm = {}\n\n        //common\n        elm['id'] = ticker;\n        elm['Ticker'] = doc.querySelector(\".issueExchange\").textContent + ':' + doc.querySelector(\".issueSymbol\").textContent;\n        elm['Name'] = doc.querySelector(\".issueName\").textContent;\n        elm['Price'] = doc.querySelector(\".primary-data-content li div span\").textContent;\n        elm['Change'] = doc.querySelector(\".changePercent\").textContent;\n        elm['52W Low'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('low');\n        elm['52W High'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('high');\n        elm['Volume'] = doc.querySelector('.volume-label ~ div').textContent;\n\n        //ETF's summary\n        elm['Rating'] = doc.querySelector('.secondary-data-content').querySelector('li:last-child').querySelector('.star-row').querySelectorAll('span')[10]?.textContent;\n        elm['Inception'] = doc.querySelector('.topFundInfo').querySelectorAll('tr')[3].querySelector('span:last-child').textContent;\n        elm['Assets'] = doc.querySelectorAll(\".FundProfileView table tr\")[5].querySelector('td')?.textContent;\n        elm['Dividend Yield'] = doc.querySelectorAll(\".FundProfileView table tr\")[10].querySelector('td')?.textContent;\n        elm['Ex-Dividend Date'] = doc.querySelectorAll(\".FundProfileView table tr\")[10].querySelector('td')?.textContent;\n        elm['MER'] = doc.querySelectorAll(\".FundProfileView table tr\")[19].querySelector('td')?.textContent;\n\n        localArr = [...localArr, elm];\n        setData(localArr);\n\n        // more ETF items\n        handleEtfsPerf(ticker, country);\n\n      })\n      .catch(function (err) {\n        console.log(\"ETFs failed\");\n      });\n\n  }\n\n  const handleEtfsPerf = (ticker, country = 'CAN') => {\n\n    let url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/PerformanceAndRisk/ca/';\n    if (country === 'US') {\n      url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/PerformanceAndRisky/us/';\n    }\n\n    rp(url + ticker)\n      .then(html => {\n        // Convert the HTML string into a document object\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(html, 'text/html');\n\n        // find the correct item from array\n        const index = localArr.findIndex(item => item.id === ticker);\n        const elm = localArr[index];\n\n        //ETF's performance and risk\n        elm['Risk'] = doc.querySelectorAll(\".risk-rating\")[0]?.querySelector('.active').textContent;\n        elm['Return'] = doc.querySelectorAll(\".risk-rating\")[1]?.querySelector('.active').textContent;\n        elm['3m return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[1].textContent;\n        elm['6m return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[2].textContent;\n        elm['3y return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[3].textContent;\n        elm['5y return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[4].textContent;\n        elm['10y return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[5].textContent;\n\n        // replace elm\n        localArr.splice(index, 1, elm);\n        //setData(localArr);\n        setData(prevState => {\n          return {\n            localArr\n          };\n        });\n      })\n      .catch(function (err) {\n        console.log(\"ETFs failed\");\n      });\n\n  }\n\n  // this runs once at start up\n  useEffect(() => {\n\n    getConfig\n      .then(configs => {\n        // loop through values in config\n        configs.map((config) => {\n          if (config.type === 'stock') {\n            handleStocks(config.name, config.country);\n          } else {\n            handleEtfs(config.name, config.country);\n          }\n          return null;\n        })\n      })\n    // .finally(() => {\n    //   setData(localArr);\n    // });\n\n  }, []);\n\n  return (\n    <div>\n      {JSON.stringify(data)}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}