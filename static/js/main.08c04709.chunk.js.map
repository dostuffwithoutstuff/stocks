{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["columns","field","headerName","width","App","useState","data","setData","localArr","getConfig","Promise","resolve","reject","fetch","then","response","json","catch","err","Error","handleEtfsPerf","ticker","country","url","rp","html","doc","DOMParser","parseFromString","index","findIndex","item","id","elm","querySelectorAll","querySelector","textContent","splice","prevState","console","log","useEffect","configs","map","config","type","getAttribute","handleStocks","name","handleEtfs","style","height","rows","pageSize","rowsPerPageOptions","checkboxSelection","disableSelectionOnClick","JSON","stringify","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08c04709.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport rp from \"request-promise\";\nimport { DataGrid } from '@mui/x-data-grid';\n\nimport \"./App.css\";\n\nconst columns = [\n  { field: 'id', headerName: 'ID', width: 90 },\n  {\n    field: 'Ticker',\n    headerName: 'Ticker'\n  },\n  {\n    field: 'Price',\n    headerName: 'Price'\n  },\n  {\n    field: 'Change',\n    headerName: 'Change'\n  },\n  {\n    field: '52W-Low',\n    headerName: '52W-Low'\n  },\n  {\n    field: '52W-High',\n    headerName: '52W-High'\n  },\n  {\n    field: 'Volume',\n    headerName: 'Volume'\n  },\n  {\n    field: 'Market-Cap',\n    headerName: 'Market-Cap'\n  },\n  {\n    field: 'Dividend-Yield',\n    headerName: 'Dividend-Yield'\n  },\n  {\n    field: 'Ex-Dividend-Date',\n    headerName: 'Ex-Dividend-Date'\n  },\n  {\n    field: 'MER',\n    headerName: 'MER'\n  },\n  {\n    field: 'Risk',\n    headerName: 'Risk'\n  },\n  {\n    field: 'Return',\n    headerName: 'Return'\n  },\n  {\n    field: 'Rating',\n    headerName: 'Rating'\n  },\n  {\n    field: 'Inception',\n    headerName: 'Inception'\n  },\n  {\n    field: 'Assets',\n    headerName: 'Assets'\n  },\n  {\n    field: 'Dividend-Yield',\n    headerName: 'Dividend-Yield'\n  },\n  {\n    field: '3m-return',\n    headerName: '3m-return'\n  },\n  {\n    field: '6m-return',\n    headerName: '6m-return'\n  },\n  {\n    field: '3y-return',\n    headerName: '3y-return'\n  },\n  {\n    field: '5y-return',\n    headerName: '5y-return'\n  },\n  {\n    field: '10y-return',\n    headerName: '10y-return'\n  },\n\n  // {\n  //   type: 'number',\n  //   valueGetter: (params) =>\n  //     `${params.getValue(params.id, 'firstName') || ''} ${\n  //       params.getValue(params.id, 'lastName') || ''\n  //     }`,\n  // },\n];\n\n\n// const temp = [\n//   {\n//     \"name\": \"TSLA\",\n//     \"type\": \"stock\",\n//     \"country\": \"US\"\n//   },\n//   {\n//     \"name\": \"XIU\",\n//     \"type\": \"etf\"\n//   },\n//   {\n//     \"name\": \"TD\",\n//     \"type\": \"stock\"\n//   },\n// ];\n\nexport default function App() {\n  const [data, setData] = useState([]);\n  let localArr = [];\n\n  // read our data file in the public folder\n  const getConfig = new Promise((resolve, reject) => {\n    fetch('data.json')\n      .then(function (response) {\n        resolve(response.json());\n        //resolve(temp);\n      })\n      .catch(function (err) {\n        reject(Error(\"Get config failed\"));\n      });\n  });\n\n  // handle canadian stocks\n  const handleStocks = (ticker, country = 'CAN') => {\n\n    let url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/Stocks/Overview/ca/';\n    if (country === 'US') {\n      url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/Stocks/Overview/us/';\n    }\n\n    rp(url + ticker)\n      .then(html => {\n        // Convert the HTML string into a document object\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(html, 'text/html');\n        var elm = {}\n\n        //common\n        elm['id'] = ticker;\n        elm['Ticker'] = doc.querySelector(\".issueExchange\").textContent + ':' + doc.querySelector(\".issueSymbol\").textContent;\n        elm['Name'] = doc.querySelector(\".issueName\").textContent;\n        elm['Price'] = doc.querySelector(\".primary-data-content li div span\").textContent;\n        elm['Change'] = doc.querySelector(\".changePercent\").textContent;\n        elm['52W-Low'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('low');\n        elm['52W-High'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('high');\n        elm['Volume'] = doc.querySelector('.volume-label ~ div').textContent;\n\n        //stocks\n        elm['Market-Cap'] = doc.querySelectorAll('.fundamentalsTable tr')[0].querySelectorAll('div')[1].textContent;\n        elm['Dividend-Yield'] = doc.querySelectorAll('.fundamentalsTable tr')[3].querySelectorAll('div')[1].textContent;\n        elm['Ex-Dividend-Date'] = doc.querySelectorAll('.fundamentalsTable tr')[5].querySelectorAll('div')[1].textContent;\n\n        localArr = [...localArr, elm];\n        setData(localArr);\n        // setData(prevState => {\n        //   return {\n        //     ...localArr\n        //   };\n        // });\n      })\n      .catch(function (err) {\n        console.log(\"Stocks failed\");\n      });\n\n  }\n\n  const handleEtfs = (ticker, country = 'CAN') => {\n\n    let url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/Summary/ca/';\n    if (country === 'US') {\n      url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/Summary/us/';\n    }\n\n    rp(url + ticker)\n      .then(html => {\n        // Convert the HTML string into a document object\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(html, 'text/html');\n        var elm = {}\n\n        //common\n        elm['id'] = ticker;\n        elm['Ticker'] = doc.querySelector(\".issueExchange\").textContent + ':' + doc.querySelector(\".issueSymbol\").textContent;\n        elm['Name'] = doc.querySelector(\".issueName\").textContent;\n        elm['Price'] = doc.querySelector(\".primary-data-content li div span\").textContent;\n        elm['Change'] = doc.querySelector(\".changePercent\").textContent;\n        elm['52W-Low'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('low');\n        elm['52W-High'] = doc.querySelectorAll(\"div[low]\")[1].getAttribute('high');\n        elm['Volume'] = doc.querySelector('.volume-label ~ div').textContent;\n\n        //ETF's summary\n        elm['Rating'] = doc.querySelector('.secondary-data-content').querySelector('li:last-child').querySelector('.star-row').querySelectorAll('span')[10]?.textContent;\n        elm['Inception'] = doc.querySelector('.topFundInfo').querySelectorAll('tr')[3].querySelector('span:last-child').textContent;\n        elm['Assets'] = doc.querySelectorAll(\".FundProfileView table tr\")[5].querySelector('td')?.textContent;\n        elm['Dividend-Yield'] = doc.querySelectorAll(\".FundProfileView table tr\")[10].querySelector('td')?.textContent;\n        elm['Ex-Dividend-Date'] = doc.querySelectorAll(\".FundProfileView table tr\")[12].querySelector('td')?.textContent;\n        elm['MER'] = doc.querySelectorAll(\".FundProfileView table tr\")[19].querySelector('td')?.textContent;\n\n        localArr = [...localArr, elm];\n        setData(localArr);\n        // setData(prevState => {\n        //   return {\n        //     ...localArr\n        //   };\n        // });\n\n        // more ETF items\n        handleEtfsPerf(ticker, country);\n\n      })\n      .catch(function (err) {\n        console.log(\"ETFs failed\");\n      });\n\n  }\n\n  const handleEtfsPerf = (ticker, country = 'CAN') => {\n\n    let url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/PerformanceAndRisk/ca/';\n    if (country === 'US') {\n      url = 'https://cors.bridged.cc/https://marketsandresearch.td.com/tdwca/Public/ETFsProfile/PerformanceAndRisky/us/';\n    }\n\n    rp(url + ticker)\n      .then(html => {\n        // Convert the HTML string into a document object\n        var parser = new DOMParser();\n        var doc = parser.parseFromString(html, 'text/html');\n\n        // find the correct item from array\n        const index = localArr.findIndex(item => item.id === ticker);\n        const elm = localArr[index];\n\n        //ETF's performance and risk\n        elm['Risk'] = doc.querySelectorAll(\".risk-rating\")[0]?.querySelector('.active').textContent;\n        elm['Return'] = doc.querySelectorAll(\".risk-rating\")[1]?.querySelector('.active').textContent;\n        elm['3m-return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[1].textContent;\n        elm['6m-return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[2].textContent;\n        elm['3y-return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[3].textContent;\n        elm['5y-return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[4].textContent;\n        elm['10y-return'] = doc.querySelectorAll(\".PerformanceOverTimeView table tr\")[1]?.querySelectorAll('div')[5].textContent;\n\n        // replace elm\n        localArr.splice(index, 1, elm);\n        //setData(localArr);\n        setData(prevState => {\n          return {\n            ...localArr\n          };\n        });\n      })\n      .catch(function (err) {\n        console.log(\"ETFs failed\");\n      });\n\n  }\n\n  // this runs once at start up\n  useEffect(() => {\n\n    getConfig\n      .then(configs => {\n        // loop through values in config\n        configs.map((config) => {\n          if (config.type === 'stock') {\n            handleStocks(config.name, config.country);\n          } else {\n            handleEtfs(config.name, config.country);\n          }\n          return null;\n        })\n      })\n    // .finally(() => {\n    //   setData(localArr);\n    // });\n\n  }, []);\n\n  return (\n    <div>\n      <div style={{ height: 400, width: '100%' }}>\n        <DataGrid\n          rows={data}\n          columns={columns}\n          pageSize={5}\n          rowsPerPageOptions={[5]}\n          checkboxSelection\n          disableSelectionOnClick\n        />\n      </div>\n      {JSON.stringify(data)}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}